package com.ubuniworks.model;
// Generated May 1, 2016 2:35:49 PM by Hibernate Tools 5.1.0.Alpha1

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Indexed;

import javax.persistence.*;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Idea generated by hbm2java
 */
@Entity
@Table(name = "idea", catalog = "kcaesn")
@Indexed
@XmlRootElement
public class Idea implements java.io.Serializable {

	private Integer ididea;
	private User user;
	private Ideabody ideabody;
	private String description;
	private String title;
	private boolean published;
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Milestone> milestones = new HashSet<Milestone>(0);
	private Set<User> likers = new HashSet<User>(0);
	private Date datecreated;
	private Set<Tag> tags = new HashSet<Tag>(0);

	public Idea() {
	}

	public Idea(User user, String description, String title, Date datecreated, boolean published) {
		this.user = user;
		this.description = description;
		this.title = title;
		this.datecreated = datecreated;
		this.published = published;
	}

	public Idea(User user, Ideabody ideabody, String description, String title, Date datecreated,
			boolean published, Set<Comment> comments, Set<Milestone> milestones, Set<User> likers, Set<Tag> tags) {
		this.user = user;
		this.ideabody = ideabody;
		this.description = description;
		this.title = title;
		this.datecreated = datecreated;
		this.published = published;
		this.comments = comments;
		this.milestones = milestones;
		this.likers = likers;
		this.tags = tags;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
    @DocumentId
	@Column(name = "ididea", unique = true, nullable = false)
	public Integer getIdidea() {
		return this.ididea;
	}

	public void setIdidea(Integer ididea) {
		this.ididea = ididea;
	}

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "user_id")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

    @ManyToOne(fetch = FetchType.EAGER)
    @Cascade(CascadeType.ALL)
	@JoinColumn(name = "idideabody")
	public Ideabody getIdeabody() {
		return this.ideabody;
	}

	public void setIdeabody(Ideabody ideabody) {
		this.ideabody = ideabody;
	}

	@Column(name = "description", nullable = false)
    @Field
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "title", nullable = false, length = 45)
    @Field
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "published", nullable = false)
	@Field
	public boolean isPublished() {
		return this.published;
	}

	public void setPublished(boolean published) {
		this.published = published;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "idea")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "idea")
	public Set<Milestone> getMilestones() {
		return this.milestones;
	}

	public void setMilestones(Set<Milestone> milestones) {
		this.milestones = milestones;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "user_likes_idea", catalog = "kcaesn", joinColumns = {
			@JoinColumn(name = "ididea", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "user_id", nullable = false, updatable = false) })
    public Set<User> getLikers() {
        return this.likers;
	}

    public void setLikers(Set<User> users) {
        this.likers = users;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "datecreated", length = 19)
	@Field
	public Date getDatecreated() {
		return this.datecreated;
	}

	public void setDatecreated(Date datecreated) {
		this.datecreated = datecreated;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "idea_has_tag", catalog = "kcaesn", joinColumns = {
			@JoinColumn(name = "idea_ididea", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "tag_idtag", nullable = false, updatable = false) })
	public Set<Tag> getTags() {
		return this.tags;
	}

	public void setTags(Set<Tag> tags) {
		this.tags = tags;
	}

}
